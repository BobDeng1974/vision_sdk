/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2013 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: Ipu2.cfg
*  Set IPU2 core0 & core1 specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arm.elf.M4
*
*******************************************************************************/

var CurrentPlatform = java.lang.System.getenv("PLATFORM");
var A15TargetOS     = java.lang.System.getenv("A15_TARGET_OS");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("src/main_app/tda2ex/cfg/BIOS_common.cfg");

var Timer       = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* root of the configuration object model */
var Program      = xdc.useModule('xdc.cfg.Program');
var GIO          = xdc.useModule('ti.sysbios.io.GIO');

var Core         = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
/* set the ipuId and coreId */
Core.ipuId = 2;
Core.id = 0;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.smpEnabled = true;

/*
 *  ======== IPU2 CORE0 Processor (primary core) ========
 *  AMMU config need to be done only on one core
 *  This is done in primary core (CORE0) , so do it here
 */
/***********************************************
 *              Ammu Configuraiton             *
 ***********************************************/
if (A15TargetOS == "Linux")
{
    var ammu = xdc.loadCapsule("Ammu2_linux.cfg");
}
if (A15TargetOS == "Bios")
{
    var ammu = xdc.loadCapsule("Ammu2_bios.cfg");
}
ammu.init();

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = "IPU2";
xdc.loadCapsule("src/main_app/tda2ex/cfg/IPC_common.cfg");


/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);
Memory.defaultHeapSize  = 0x15000;


Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"] = "SYSTEM_IPC_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"] = "LINK_STATS_MEM";


Program.sectMap[".text"]                      = "IPU2_CODE_MEM";
Program.sectMap[".const"]                     = "IPU2_CODE_MEM";
Program.sectMap[".plt"]                       = "IPU2_CODE_MEM";

Program.sectMap[".bss"]                       = "IPU2_DATA_MEM";
Program.sectMap[".neardata"]                  = "IPU2_DATA_MEM";
Program.sectMap[".rodata"]                    = "IPU2_DATA_MEM";

Program.sectMap[".bss:taskStackSection"]      = "IPU2_DATA_MEM";

/* Exception hook function */
var HwiM3       = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

/* enable print of exception handing info */
HwiM3.enableException = true;
HwiM3.nvicCCR.DIV_0_TRP = 1;
HwiM3.excHookFunc = '&Utils_m4ExceptionHookFxn';

/* XDC runtime function */
var Error = xdc.useModule("xdc.runtime.Error");
Error.raiseHook = "&Utils_commonErrorRaiseHook";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

    /* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
    var Idle = xdc.useModule("ti.sysbios.knl.Idle");
    Idle.addCoreFunc('&Utils_idleFxn', 0);
    Idle.addCoreFunc('&Utils_idleFxn', 1);


if (A15TargetOS == "Linux")
{
    xdc.loadCapsule("src/main_app/tda2ex/ipu2/Ipu2_a15_linux.cfg");
}
else
{
    /***********************************************
     *          CLOCK Module Configuraion          *
     ***********************************************/
    var Clock = xdc.useModule("ti.sysbios.knl.Clock");
    Clock.tickMode = Clock.TickMode_PERIODIC;
    Clock.tickSource = Clock.TickSource_USER;

    /***********************************************
    *           Timer Module Configuraion         *
    ***********************************************/
    var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');

    Timer.intFreqs[8].hi = 0;
    /* system clock runs at 20 MHz */
    Timer.intFreqs[8].lo = 20000000;

    var timerParams = new Timer.Params();
    timerParams.period = 1000;
    timerParams.twer.ovf_wup_ena = 1;
    timerParams.tiocpCfg.emufree = 1;
    timerParams.tsicr.posted = 0;
    Timer.create(8, '&mainIPU2_TimerTick', timerParams);

    var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
    var timerParams2 = new DMTimer.Params();
    timerParams2.tsicr.posted = 0;
    DMTimer.intFreqs[10].hi = 0;
    DMTimer.intFreqs[10].lo = 20000000;
    var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
    DMTimestampProvider.timerId = 10;
    DMTimestampProvider.useClockTimer = false;
    var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
    Timestamp.SupportProxy = DMTimestampProvider;

    /* allocate timer 9 to IPU0 */
    var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
    TimerSupport.availMask = 0x0500;
}

/* In order to check how much percentange of Idle time the CPU is in Low power */
var LocalTimestampProvider = xdc.useModule('ti.sysbios.family.arm.ducati.TimestampProvider');

